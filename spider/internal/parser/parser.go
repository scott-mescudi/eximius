package parser

import (
	"bytes"
	"strings"

	"github.com/scott-mescudi/eximius/spider/pkg/models"
	"golang.org/x/net/html"
)

var replacer = strings.NewReplacer(
	" a ", " ",
	" about ", " ",
	" above ", " ",
	" after ", " ",
	" again ", " ",
	" against ", " ",
	" all ", " ",
	" am ", " ",
	" an ", " ",
	" and ", " ",
	" any ", " ",
	" are ", " ",
	" aren't ", " ",
	" as ", " ",
	" at ", " ",
	" be ", " ",
	" because ", " ",
	" been ", " ",
	" before ", " ",
	" being ", " ",
	" below ", " ",
	" between ", " ",
	" both ", " ",
	" but ", " ",
	" by ", " ",
	" can't ", " ",
	" cannot ", " ",
	" could ", " ",
	" couldn't ", " ",
	" did ", " ",
	" didn't ", " ",
	" do ", " ",
	" does ", " ",
	" doesn't ", " ",
	" doing ", " ",
	" don't ", " ",
	" down ", " ",
	" during ", " ",
	" each ", " ",
	" few ", " ",
	" for ", " ",
	" from ", " ",
	" further ", " ",
	" had ", " ",
	" hadn't ", " ",
	" has ", " ",
	" hasn't ", " ",
	" have ", " ",
	" haven't ", " ",
	" having ", " ",
	" he ", " ",
	" he'd ", " ",
	" he'll ", " ",
	" he's ", " ",
	" her ", " ",
	" here ", " ",
	" here's ", " ",
	" hers ", " ",
	" herself ", " ",
	" him ", " ",
	" himself ", " ",
	" his ", " ",
	" how ", " ",
	" how's ", " ",
	" i ", " ",
	" i'd ", " ",
	" i'll ", " ",
	" i'm ", " ",
	" i've ", " ",
	" if ", " ",
	" in ", " ",
	" into ", " ",
	" is ", " ",
	" isn't ", " ",
	" it ", " ",
	" it's ", " ",
	" its ", " ",
	" itself ", " ",
	" let's ", " ",
	" me ", " ",
	" more ", " ",
	" most ", " ",
	" mustn't ", " ",
	" my ", " ",
	" myself ", " ",
	" no ", " ",
	" nor ", " ",
	" not ", " ",
	" of ", " ",
	" off ", " ",
	" on ", " ",
	" once ", " ",
	" only ", " ",
	" or ", " ",
	" other ", " ",
	" ought ", " ",
	" our ", " ",
	" ours ", " ",
	" ourselves ", " ",
	" out ", " ",
	" over ", " ",
	" own ", " ",
	" same ", " ",
	" she ", " ",
	" she'd ", " ",
	" she'll ", " ",
	" she's ", " ",
	" should ", " ",
	" shouldn't ", " ",
	" so ", " ",
	" some ", " ",
	" such ", " ",
	" than ", " ",
	" that ", " ",
	" that's ", " ",
	" the ", " ",
	" their ", " ",
	" theirs ", " ",
	" them ", " ",
	" themselves ", " ",
	" then ", " ",
	" there ", " ",
	" there's ", " ",
	" these ", " ",
	" they ", " ",
	" they'd ", " ",
	" they'll ", " ",
	" they're ", " ",
	" they've ", " ",
	" this ", " ",
	" those ", " ",
	" through ", " ",
	" to ", " ",
	" too ", " ",
	" under ", " ",
	" until ", " ",
	" up ", " ",
	" very ", " ",
	" was ", " ",
	" wasn't ", " ",
	" we ", " ",
	" we'd ", " ",
	" we'll ", " ",
	" we're ", " ",
	" we've ", " ",
	" were ", " ",
	" weren't ", " ",
	" what ", " ",
	" what's ", " ",
	" when ", " ",
	" when's ", " ",
	" where ", " ",
	" where's ", " ",
	" which ", " ",
	" while ", " ",
	" who ", " ",
	" who's ", " ",
	" whom ", " ",
	" why ", " ",
	" why's ", " ",
	" with ", " ",
	" won't ", " ",
	" would ", " ",
	" wouldn't ", " ",
	" you ", " ",
	" you'd ", " ",
	" you'll ", " ",
	" you're ", " ",
	" you've ", " ",
	" your ", " ",
	" yours ", " ",
	" yourself ", " ",
	" yourselves ", " ",
	" uh ", " ",
	" um ", " ",
	" like ", " ",
	" you know ", " ",
	" i mean ", " ",
	" so ", " ",
	" actually ", " ",
	" basically ", " ",
	" literally ", " ",
	" okay ", " ",
	" right ", " ",
	" well ", " ",
	" good ", " ",
	" great ", " ",
	" excellent ", " ",
	" amazing ", " ",
	" awesome ", " ",
	" fantastic ", " ",
	" wonderful ", " ",
	" nice ", " ",
	" superb ", " ",
	" outstanding ", " ",
	" incredible ", " ",
	" impressive ", " ",
	" brilliant ", " ",
	" perfect ", " ",
	" beautiful ", " ",
	" cool ", " ",
	" smart ", " ",
	" clever ", " ",
	" best ", " ",
	" better ", " ",
	" useful ", " ",
	" valuable ", " ",
	" efficient ", " ",
	" effective ", " ",
	" strong ", " ",
	" powerful ", " ",
	" interesting ", " ",
	" important ", " ",
	" significant ", " ",
	" bad ", " ",
	" terrible ", " ",
	" horrible ", " ",
	" awful ", " ",
	" worst ", " ",
	" dumb ", " ",
	" stupid ", " ",
	" useless ", " ",
	" weak ", " ",
	" boring ", " ",
	" lame ", " ",
	" ugly ", " ",
	" poor ", " ",
	" mediocre ", " ",
	" slow ", " ",
	" problematic ", " ",
	" annoying ", " ",
	" ridiculous ", " ",
	" disappointing ", " ",
	" unhelpful ", " ",
	" meaningless ", " ",
	" irrelevant ", " ",
	" big ", " ",
	" small ", " ",
	" large ", " ",
	" tiny ", " ",
	" huge ", " ",
	" short ", " ",
	" long ", " ",
	" easy ", " ",
	" hard ", " ",
	" difficult ", " ",
	" simple ", " ",
	" complex ", " ",
	" basic ", " ",
	" advanced ", " ",
	" major ", " ",
	" minor ", " ",
	" common ", " ",
	" rare ", " ",
	" new ", " ",
	" old ", " ",
	" modern ", " ",
	" traditional ", " ",
	" early ", " ",
	" late ", " ",
	" real ", " ",
	" fake ", " ",
	" true ", " ",
	" false ", " ",
	" obvious ", " ",
	" unclear ", " ",
	" might ", " ",
	" may ", " ",
	" could ", " ",
	" would ", " ",
	" should ", " ",
	" must ", " ",
	" can ", " ",
	" shall ", " ",
	" want ", " ",
	" wants ", " ",
	" wanted ", " ",
	" wishing ", " ",
	" wish ", " ",
	" hope ", " ",
	" hopes ", " ",
	" hoping ", " ",
	" intend ", " ",
	" intends ", " ",
	" intended ", " ",
	" plan ", " ",
	" plans ", " ",
	" planned ", " ",
	" aim ", " ",
	" aims ", " ",
	" aiming ", " ",
	" desire ", " ",
	" desires ", " ",
	" desiring ", " ",
	" choose ", " ",
	" chooses ", " ",
	" chose ", " ",
	" decide ", " ",
	" decides ", " ",
	" decided ", " ",
	" maybe ", " ",
	" perhaps ", " ",
	" probably ", " ",
	" possibly ", " ",
	" likely ", " ",
	" unlikely ", " ",
	" apparently ", " ",
	" seems ", " ",
	" seems like ", " ",
	" looks like ", " ",
	" try ", " ",
	" tries ", " ",
	" tried ", " ",
	" attempt ", " ",
	" attempts ", " ",
	" attempted ", " ",
	" use ", " ",
	",", " ",
	";", " ",
	":", " ",
	"!", " ",
	"?", " ",
	"\"", " ",
	"'", " ",
	"(", " ",
	")", " ",
	"[", " ",
	"]", " ",
	"{", " ",
	"}", " ",
	"-", " ",
	"_", " ",
	"+", " ",
	"=", " ",
	"\\", " ",
	"&", " ",
	"#", " ",
	"$", " ",
	"%", " ",
	"^", " ",
	"*", " ",
	"|", " ",
	"`", " ",
	"~", " ",
	" hello ", " ",
	" hi ", " ",
	" hey ", " ",
	" greetings ", " ",
	" welcome ", " ",
	" good morning ", " ",
	" good afternoon ", " ",
	" good evening ", " ",
	" goodbye ", " ",
	" bye ", " ",
	" see you ", " ",
	" take care ", " ",
	" farewell ", " ",
	" catch you ", " ",
	" later ", " ",
	" cheers ", " ",
	" visit ", " ",
)

func extractText(n *html.Node) string {
	var sb strings.Builder

	var crawler func(*html.Node)
	crawler = func(n *html.Node) {
		if n.Type == html.TextNode {
			trimmed := strings.TrimSpace(n.Data)
			if trimmed != " " {
				sb.WriteString(trimmed)
				sb.WriteString(" ")
			}
		}
		if n.Type == html.ElementNode && (n.Data == "script" || n.Data == "style") {
			return
		}
		for c := n.FirstChild; c != nil; c = c.NextSibling {
			crawler(c)
		}
	}

	crawler(n)
	return sb.String()
}

func extractTitleAndDescription(n *html.Node) (title, description string) {
	var walker func(*html.Node)
	walker = func(n *html.Node) {
		if n.Type == html.ElementNode {
			if n.Data == "title" && n.FirstChild != nil {
				title = n.FirstChild.Data
			}

			if n.Data == "meta" {
				var name, content string
				for _, attr := range n.Attr {
					switch strings.ToLower(attr.Key) {
					case "name":
						name = strings.ToLower(attr.Val)
					case "content":
						content = attr.Val
					}
				}

				if name == "description" {
					description = content
				}
			}
		}

		for c := n.FirstChild; c != nil; c = c.NextSibling {
			walker(c)
		}
	}
	walker(n)
	return
}

func parseDocument(document string) (parsedDocument models.ParsedDocument) {
	dt, _ := html.Parse(bytes.NewReader([]byte(document)))
	title, description := extractTitleAndDescription(dt)
	parsedDocument.Title = title
	parsedDocument.Description = description

	text := extractText(dt)
	parsedDocument.Text = replacer.Replace(strings.ToLower(text))
	parsedDocument.Text = replacer.Replace(parsedDocument.Text)

	return parsedDocument
}
